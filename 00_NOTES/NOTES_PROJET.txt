================================================================================
                              Références & Raccourcis                                
================================================================================


💡 Pour compiler ce projet :
sudo apt install libglfw3-dev libglfw3
make
ou encore mieux : sudo apt install libglfw3-dev libglfw3 build-essential



===============================================================================
                           INSTALLATION DE LA LIB MLX42
===============================================================================

1️⃣ Télécharger la bibliothèque et la placer à la racine du projet :

   📌 Site officiel :
       https://github.com/codam-coding-college/MLX42

   📌 Commande terminal :
       git clone https://github.com/codam-coding-college/MLX42.git


===============================================================================
                           TESTS AVEC VALGRIND
===============================================================================

✅ Avant l'intégration de la librairie graphique (parsing uniquement) :
valgrind --leak-check=full --show-leak-kinds=all --trace-children=yes --track-fds=yes ./cub3D ./maps/wrong_path.cub

✅ Après l'intégration de la librairie graphique :
valgrind --leak-check=full --show-leak-kinds=all --suppressions=valgrind.supp ./cub3D ./maps/wrong_path.cub


===============================================================================
                           RÉFÉRENCE CODE COULEURS RGB
===============================================================================

🎨 Guide des couleurs web :
    https://www.mirobolus.fr/les-codes-couleurs-du-web/











================================================================================
                 Améliorations Potentielles - Fonctionnalités bonus                
================================================================================


#### ▸ Améliorer la fluidité :

➡️ Voir le document Boost_cub3D.docx
(Uniquement pour la compilation en mode bonus, car cette modification désactive la fermeture via la croix de la fenêtre.)



#### ▸ Ajouter la gestion de la souris :
 

1. Ajouter cette fonction dans le dossier game dans un fichier dédier a mouse : 

void handle_mouse_input(t_resources *resources)
{
    static int32_t  prev_x = -1;
    int32_t         margin;
    double          sensibility;
    int32_t         mouse_x;
    int32_t         mouse_y;
    int32_t         delta_x;

    margin = 10;
    sensibility = 0.0002;
    mlx_get_mouse_pos(resources->mlx, &mouse_x, &mouse_y);

    if (prev_x == -1)
        prev_x = mouse_x;

    delta_x = mouse_x - prev_x;
    prev_x = mouse_x;

    if (delta_x > 400)
		delta_x = 400;
	if (delta_x < -400)
		delta_x = -400;

    if (delta_x != 0)
    {
        double angle;
        angle = delta_x * sensibility * resources->mlx->delta_time * 60.0;
        move_player_rotation(&resources->player_data, angle);
    }

    int screen_width = resources->dimensions_config.screen_width;
    int screen_height = resources->dimensions_config.screen_height;

    if (mouse_x < margin || mouse_x > (screen_width - margin) || mouse_y < margin || mouse_y > (screen_height - margin))
    {
        mlx_set_mouse_pos(resources->mlx, screen_width / 2, screen_height / 2);
        prev_x = screen_width / 2;
    }
}


2. Ne pas oublier de l'inclure dans cub3d.h : 

void	handle_keypress_input(t_resources *resources);
void	handle_mouse_input(t_resources *resources);


3. Dans ./engine/engine_loop.c modifier engine_loop() pour y appeler handle_mouse_input()


void	engine_loop(void *setting)
{
	t_resources	*resources;
	
	resources = setting;

	handle_keypress_input(resources);
	// Rajouter ceci :
	handle_mouse_input(resources);
	render_frame(resources);

}


4. Dans ./resources/resources_manager.c modifier init_game_data() pour y appeler mlx_set_cursor_mode()


void	init_game_data(t_resources	*resources)
{

	set_player_orientation(resources);
	set_floor_and_ceiling_colors(resources);
	
	resources->mlx = mlx_init(resources->dimensions_config.screen_width, resources->dimensions_config.screen_height, "cub3D", false);

	if (resources->mlx == NULL)
	{
		write_and_exit_error(ERROR_MLX_INIT, &(resources->map_data));
	}

	// Rajouter ceci :
	mlx_set_cursor_mode(resources->mlx, MLX_MOUSE_DISABLED);

	resources->north_image = load_image_texture(resources, resources->map_data.north_texture_path);
	resources->south_image = load_image_texture(resources, resources->map_data.south_texture_path);
	resources->west_image = load_image_texture(resources, resources->map_data.west_texture_path);
	resources->east_image = load_image_texture(resources, resources->map_data.east_texture_path);
}








================================================================================
                              Anciennes Implémentations                              
================================================================================


MLX42 (via GLFW) maintient un tableau d’états des touches.
A chaque frame (des 60 chez nous), ce tableau est mis à jour :

true si la touche est pressée.
false si la touche est relâchée

Appeler mlx_is_key_down(mlx, MLX_KEY_...), lit directement cet etat en temps réel.
C'est le plus optimisé apres pleins de tests.


Version 24 fps :

#define MOVE_SPEED 0.08
#define ROTATION_SPEED 0.05

Remplacer dans input_handler.c : 
void	manage_keypress_input(t_resources *resources)
par :
void	handle_keypress(mlx_key_data_t key_data, void *setting)

Puis dans le main remplacer : 
mlx_loop_hook(resources.mlx, &engine_loop, &resources);
par :
render_frame(&resources);	
mlx_key_hook(resources.mlx, &handle_keypress, &resources);

Supprimer la fonction suivante dans engine elle n'est plus d'aucune utilié :
static void	engine_loop(void *setting)


static void update_player_position(mlx_key_data_t key_data, t_resources *resources)
{
    t_player_data   *player_data;
    t_map_data    *map_data;
    
    player_data = &resources->player_data;
    map_data = &resources->map_data;

    if (key_data.key == MLX_KEY_LEFT)
        move_player_rotation(player_data, -ROTATION_SPEED);
    if (key_data.key == MLX_KEY_RIGHT)
        move_player_rotation(player_data, ROTATION_SPEED);

    if (key_data.key == MLX_KEY_W || key_data.key == MLX_KEY_UP)
        move_player_linear(player_data, map_data, +1);
    if (key_data.key == MLX_KEY_S || key_data.key == MLX_KEY_DOWN)
        move_player_linear(player_data, map_data, -1);

    if (key_data.key == MLX_KEY_A)
        move_player_lateral(player_data, map_data, -1);
    if (key_data.key == MLX_KEY_D)
        move_player_lateral(player_data, map_data, +1);

}

void	handle_keypress(mlx_key_data_t key_data, void *setting)
{
	t_resources *resources;

	resources = (t_resources *)setting;
	if (key_data.action == MLX_PRESS || key_data.action == MLX_REPEAT)
	{
		if (key_data.key == MLX_KEY_ESCAPE)
            write_and_exit_with_graphics_error(INFO_ESCAPE_EXIT, resources);
        update_player_position(key_data, resources);
        render_frame(resources);
	}
}








================================================================================
                                Parsing – Zone d’Ombre                                
================================================================================

✅ Validation des Espacements
(Assurer un formatage correct avant les arguments)


static void  verify_single_space(char **line, int fd, t_map_data *map_data)
{
	int	i;

	i = 0;

    if (*line[0] != ' ')
	{
 		write_close_and_exit(fd, ERROR_MISSING_TEXTURE_PATH, map_data);
	}
    i++;

    if (*line[0] == '\0' || *line[0] == ' ' || *line[0] == '\n' || *line[0] == '\t' || *line[0] == '\r' || *line[0] == '\v' || *line[0] == '\f')
	{
 		write_close_and_exit(fd, ERROR_MISSING_TEXTURE_PATH, map_data);
	}
}



✅ Intégrité des Limites de la Carte
(Garantir une map totalement fermée par des murs)


Réflexion durant 12 secondes
Oui — tu peux avancer sereinement.

Pourquoi :

--- La règle du sujet ---
Le cahier des charges dit seulement : 
« La map doit être fermée/entourée de murs, sinon le programme doit renvoyer une erreur. » 

Il n’impose pas que chaque caractère du pourtour soit littéralement un '1' dans le fichier ; 
il exige qu’aucun sol ('0' ou position joueur) ne puisse rejoindre le dehors.

Ton implémentation satisfait cette règle.

Tu recopies la carte dans un tableau rectangulaire rempli d’espaces ; les zones hors map restent donc des ' ' 
.

Tu lances ensuite un flood‑fill depuis la position du joueur ; 
si l’algorithme atteint un espace, un '\0' ou sort du tableau, tu lèves ERROR_MAP_NOT_CLOSED 
.

Bref, si le flood‑fill passe, aucun chemin n’existe vers l’extérieur : condition respectée.

Pourquoi les exemples du sujet sont “plein de 1”
Les auteurs montrent la forme la plus simple : une bordure continue de murs. 
Mais une “caverne” interne d’espaces, totalement isolée par des '1', est tout à fait valide ; 
ton algo la valide correctement.

















================================================================================
                                   Code Archives                                    
================================================================================

static uint32_t convert_rgb_to_argb(int rgb[3])
{
    uint32_t alpha;
    uint32_t red;
    uint32_t green;
    uint32_t blue;
	uint32_t final_color;

	alpha = 0xFF;
	red = (uint32_t)rgb[0];
	green = (uint32_t)rgb[1];
	blue = (uint32_t)rgb[2];

    alpha = alpha << 24;
    red   = red << 16;
    green = green << 8;

	final_color = (alpha | red | green | blue);

    return (final_color);
}


static void	get_map_dimensions(int fd, t_map_data *map_data)
{
    char    *line;
    int     i;
    int     map_status;

    map_status = 0;
    line = get_next_line(fd, 0);
    while (line != NULL)
    {
		i = skip_white_space(line);
        if (map_status == 0)
		{
			if (line[i] == '1')
				map_status = 1;
			else
			{
				free(line);
                line = get_next_line(fd, 0);
				continue ;
			}
		}
		if (map_status == 1)
        {
            if (line[i] != '1')
			{
                map_status = 2;
				free(line);
                line = get_next_line(fd, 0);
				continue ;
			}
            map_data->map_height = map_data->map_height + 1;
        }
        if (map_status == 2)
        {
            if (line[i] == '1')
            {
                free(line);
                clear_remaining_lines_gnl(fd);
                write_close_and_exit(fd, ERROR_MAP_NOT_SINGLE_BLOCK, map_data);
            }
        }
		free(line);
		line = get_next_line(fd, 0);
	}
}


void get_map(int fd, t_map_data *map_data)
{
    char    *line;
	int		map_status;
	int		i;

	i = 0;
	map_data->map = malloc(sizeof(char *) * (map_data->map_height + 1));
	if (map_data->map == NULL)
	{
        clear_remaining_lines_gnl(fd);
        write_close_and_exit(fd, ERROR_ALLOC, map_data);
	}
    line = get_next_line(fd, 0);
    while (line != NULL)
    {
		map_status = has_map_started_to_copy(&line, fd);
		if (map_status == 0)
			continue ;
		delete_newline_if_present(line);
		map_data->map[i] = malloc_filled_with_space(map_data->map_width + 1, sizeof(char));
		if (map_data->map[i] == NULL)
		{
			free(line);
            clear_remaining_lines_gnl(fd);
            write_close_and_exit(fd, ERROR_ALLOC, map_data);
		}
		ft_memcpy(map_data->map[i], line, ft_strlen(line));
		i++;
		free(line);
		line = get_next_line(fd, 0);
	}
	map_data->map[i] = NULL;
}


static char	*delete_newline_if_present(int fd, char *line)
{
	char	*tmp;

	tmp = ft_strtrim(line, "\n");
	if (tmp == NULL)
	{
		free(line);
        clear_remaining_lines_gnl(fd);
        write_close_and_exit(fd, ERROR_ALLOC, map_data);
	}
	free(line);
	return (tmp);
}


typedef struct s_texture_data
{
	void	*image;
	char	*address;
	int		width;
	int		height;
	int		bpp;
	int		line_length;
	int		endian;
} t_texture_data;


static void	vis_write(char c)
{
	if (c == '\0')
		write(1, "*", 1);
	else if (c == '\t')
		write(1, "\\t", 2);
	else if (c == '\r')
		write(1, "\\r", 2);
	else if (c == ' ')
		write(1, ".", 1);
	else
		write(1, &c, 1);
}

void	debug_dump_map(t_map_data *d)
{
	int		y;
	int		x;
	char	header[64];

	if (!d || !d->map)
		return ;
	write(1, "\n=== RAW MAP DUMP ===\n    ", 24);
	x = -1;
	while (++x < d->map_width)
		header[x % 10] = '0' + (x % 10);
	write(1, header, d->map_width);
	write(1, "\n", 1);
	y = -1;
	while (++y < d->map_height)
	{
		write(1, "|", 1);
		x = -1;
		while (++x < d->map_width)
			vis_write(d->map[y][x]);
		write(1, "|\n", 2);
	}
	write(1, "====================\n", 21);
}
